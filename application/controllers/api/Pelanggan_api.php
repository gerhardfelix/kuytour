<?php
use Restserver\Libraries\REST_Controller;
defined('BASEPATH') OR exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
/** @noinspection PhpIncludeInspection */
//To Solve File REST_Controller not found
require APPPATH . 'libraries/REST_Controller.php';
require APPPATH . 'libraries/Format.php';

/**
 * This is an example of a few basic user interaction methods you could use
 * all done with a hardcoded array
 *
 * @package         CodeIgniter
 * @subpackage      Rest Server
 * @category        Controller
 * @author          Phil Sturgeon, Chris Kacerguis
 * @license         MIT
 * @link            https://github.com/chriskacerguis/codeigniter-restserver
 */
class Pelanggan_api extends REST_Controller {

    function __construct()
    {
        // Construct the parent class
        parent::__construct();
        $this->load->model('pelanggan_model');
        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        $this->methods['pelanggan_get']['limit'] = 500; // 500 requests per hour per user/key
        $this->methods['pelanggan_post']['limit'] = 100; // 100 requests per hour per user/key
    }


    public function pelanggan_get()
    {
        // Users from a data store e.g. database
        $pelanggan = $this->pelanggan_model->get_pelanggan();

        $id = $this->get('slug');

        // If the id parameter doesn't exist return all the users

        if ($id === NULL)
        {
            // Check if the users data store contains users (in case the database result returns NULL)
            if ($pelanggan)
            {
                // Set the response and exit
                $this->response($pelanggan, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
            }
            else
            {
                // Set the response and exit
                $this->response([
                    'status' => FALSE,
                    'message' => 'No customer were found'
                ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
            }
        } else {
            $pelanggan = $this->pelanggan_model->get_pelanggan($id);
            if ($pelanggan)
            {
                // Set the response and exit
                $this->response($pelanggan, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
            }
            else
            {
                // Set the response and exit
                $this->response([
                    'status' => FALSE,
                    'message' => 'Pelanggan tidak ditemukan'
                ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
            }
        }

    }

    public function pelanggan_post()
    {
        $pelanggan = $this->pelanggan_model->set_pelanggan();
        $message = [
            'id' => $pelanggan['id'], // Automatically generated by the model
            'message' => 'Added a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function pelanggan_put()
    {
        $data = array(
            'telpon' => $this->input->get('telpon')
        );
        $chat_id = $this->input->get('chat_id');

        $pelanggan = $this->pelanggan_model->edit_pelanggan_by_webhook($chat_id, $data);
        $message = [
            'id' => $chat_id, // Automatically generated by the model
            'message' => 'edited a resource',
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }


}
